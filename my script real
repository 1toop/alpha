local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

local Window = Library:CreateWindow({
    Title = "Bee Swarm Automator",
    Footer = "version: 1.4 (Simplified)",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Farming = Window:AddTab("Farming", "flower"),
    Buffs = Window:AddTab("Buffs", "zap"),
    Purchasing = Window:AddTab("Purchasing", "shopping-cart"),
    Misc = Window:AddTab("Misc", "box"),
    Tools = Window:AddTab("Tools", "tool"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local function getItemCount(itemName)
    local StatCache = require(game:GetService("ReplicatedStorage").ClientStatCache)
    local data = StatCache:Get()
    return data.Eggs[itemName] or 0
end

local autoFarmEnabled = false
local autoDigEnabled = false
local collectBubblesEnabled = false
local autoFarmLoop
local autoDigLoop
local noclipEnabled = false

local function doAutoFarm()
    if not autoFarmEnabled then return end

    local player = game.Players.LocalPlayer
    if not player or not player.Character then return end
    local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    local humanoid = player.Character:FindFirstChild("Humanoid")
    if not humanoid then return end

    local fieldName = Options.AutoFarmField.Value
    local targetField = game.Workspace.FlowerZones:FindFirstChild(fieldName)

    if not targetField or not targetField:FindFirstChild("ColorGroup") then
        Library:Notify("Invalid field selected!", 5)
        toggleAutoFarm(false)
        return
    end

    -- Телепортация к полю в начале
    humanoidRootPart.CFrame = targetField.CFrame + Vector3.new(0, 3, 0)

    while autoFarmEnabled do
        if not player or not player.Character or player.Character.Humanoid.Health <= 0 then
            toggleAutoFarm(false)
            break
        end

        if noclipEnabled then
            for _, part in pairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end

        -- Фарминг
        for _, collectible in pairs(game.Workspace.Collectibles:GetChildren()) do
            if not autoFarmEnabled then break end
            if collectible and collectible.Parent and collectible:FindFirstChild("FrontDecal") then
                if (collectible.Position - humanoidRootPart.Position).Magnitude <= 50 then
                    humanoid:MoveTo(collectible.Position)
                    humanoid.MoveToFinished:Wait(1)
                end
            end
        end

        -- Сбор пузырьков
        if collectBubblesEnabled then
            for _, bubble in pairs(game.Workspace.Particles:GetChildren()) do
                if not autoFarmEnabled then break end
                if bubble.Name:find("Bubble") and (bubble.Position - humanoidRootPart.Position).Magnitude <= 50 then
                    humanoid:MoveTo(bubble.Position)
                    humanoid.MoveToFinished:Wait(1)
                end
            end
        end

        task.wait(0.1)
    end
end

local function toggleAutoFarm(state)
    autoFarmEnabled = state
    Toggles.AutoFarmToggle:SetValue(autoFarmEnabled)
    Library.Toggles.AutoFarmToggle.Text = autoFarmEnabled and "AutoFarm: ON" or "AutoFarm: OFF"

    if autoFarmEnabled then
        autoFarmLoop = task.spawn(doAutoFarm)
    else
        if autoFarmLoop then
            task.cancel(autoFarmLoop)
            autoFarmLoop = nil
        end
    end
end

local function toggleAutoDig(state)
    autoDigEnabled = state
    Toggles.AutoDigToggle:SetValue(autoDigEnabled)
    Library.Toggles.AutoDigToggle.Text = autoDigEnabled and "AutoDig: ON" or "AutoDig: OFF"

    if autoDigEnabled then
        autoDigLoop = task.spawn(function()
            while autoDigEnabled do
                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ToolCollect"):FireServer()
                task.wait(0.5)
            end
        end)
    else
        if autoDigLoop then
            task.cancel(autoDigLoop)
            autoDigLoop = nil
        end
    end
end

local function toggleCollectBubbles(state)
    collectBubblesEnabled = state
    Toggles.CollectBubblesToggle:SetValue(collectBubblesEnabled)
    Library.Toggles.CollectBubblesToggle.Text = collectBubblesEnabled and "Collect Bubbles: ON" or "Collect Bubbles: OFF"
end

local function toggleNoclip(state)
    noclipEnabled = state
    Toggles.NoclipToggle:SetValue(noclipEnabled)
    Toggles.NoclipToggle:SetText("Noclip: " .. (noclipEnabled and "ON" or "OFF"))
end

local function buyBeequipSlots(amount)
    local args = { "Purchase", { Type = "BeequipStorageSlot", Category = "Eggs", Amount = amount } }
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ItemPackageEvent"):InvokeServer(unpack(args))
end

local function buyAllBundles()
    for i = 1, 6 do
        game:GetService("ReplicatedStorage").Events.ItemPackageEvent:InvokeServer("Purchase", {
            Type = "Dapper Bundle " .. i,
            Amount = 1,
            Category = "Bundle",
        })
        task.wait(0.1)
    end
end

local function upgradeStickerBook(times)
    for i = 1, times do
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("StickerBookExpand"):FireServer()
        task.wait(0.1)
    end
end

local function buyHiveSlots(times)
    for i = 1, times do
        local args = {
            [1] = "Purchase",
            [2] = { ["Type"] = "Hive Slot", ["Category"] = "HiveSlot", ["Amount"] = 1 },
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ItemPackageEvent"):InvokeServer(unpack(args))
        task.wait(0.1)
    end
end

local function useBuff(buffName)
    if not buffName then return end
    game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = buffName})
end

local function createBuffToggle(buffName, group)
    local toggleName = "AutoUse" .. buffName:gsub(" ", "")
    local lastUsed = 0
    local cooldown = 600 -- 10 минут для всех баффов, кроме Glitter
    if buffName == "Glitter" then
        cooldown = 910 -- 15 минут и 10 секунд для Glitter
    end

    group:AddToggle(toggleName, {
        Text = "Auto Use " .. buffName .. ": OFF",
        Default = false,
        Callback = function(state)
            Toggles[toggleName]:SetValue(state)
            Toggles[toggleName]:SetText("Auto Use " .. buffName .. ": " .. (state and "ON" or "OFF"))
            if state then
                task.spawn(function()
                    while Toggles[toggleName].Value do
                        local currentTime = tick()
                        if currentTime - lastUsed >= cooldown then
                            if buffName == "Glitter" then
                                local player = game.Players.LocalPlayer
                                local fieldName = Options.AutoFarmField.Value
                                local targetField = game.Workspace.FlowerZones:FindFirstChild(fieldName)
                                if targetField and targetField:FindFirstChild("ColorGroup") then
                                    useBuff(buffName)
                                    lastUsed = currentTime
                                end
                            else
                                useBuff(buffName)
                                lastUsed = currentTime
                            end
                        end
                        task.wait(1)
                    end
                end)
            end
        end
    })
end

local function changeHiveToRed()
    local hive = {
        [1] = {
            [1] = "Vicious",
            [2] = "Shy",
            [3] = "Carpenter",
            [4] = "Vector",
            [5] = "Vector",
            [6] = "Vector",
            [7] = "Vector",
            [8] = "Spicy",
            [9] = "Precise",
            [10] = "Precise"
        },
        [2] = {
            [1] = "Crimson",
            [2] = "Lion",
            [3] = "Tadpole",
            [4] = "Tadpole",
            [5] = "Vector",
            [6] = "Spicy",
            [7] = "Spicy",
            [8] = "Precise",
            [9] = "Precise",
            [10] = "Precise"
        },
        [3] = {
            [1] = "Bear",
            [2] = "Digital",
            [3] = "Brave",
            [4] = "Basic",
            [5] = "Buoyant",
            [6] = "Vector",
            [7] = "Vector",
            [8] = "Spicy",
            [9] = "Spicy",
            [10] = "Precise"
        },
        [4] = {
            [1] = "Photon",
            [2] = "Riley",
            [3] = "Tadpole",
            [4] = "Tadpole",
            [5] = "Vector",
            [6] = "Spicy",
            [7] = "Spicy",
            [8] = "Precise",
            [9] = "Precise",
            [10] = "Precise"
        },
        [5] = {
            [1] = "Tabby",
            [2] = "Commander",
            [3] = "Carpenter",
            [4] = "Vector",
            [5] = "Vector",
            [6] = "Vector",
            [7] = "Vector",
            [8] = "Spicy",
            [9] = "Precise",
            [10] = "Precise"
        }
    }

    local plrhive = game:GetService("Players").LocalPlayer.Honeycomb.Value.Cells
    local r = game:GetService("ReplicatedStorage").Events.ConstructHiveCellFromEgg

    for col,v in pairs(hive) do
        for row,v in pairs(v) do
            local cell = plrhive:FindFirstChild("C" .. col .. "," .. row)
            if cell ~= nil and cell.CellType.Value ~= v .. "Bee" then
                r:InvokeServer(col, row, v .. "Bee", 1, false)
                task.wait(0.25)
            end
        end
    end
end

local function changeHiveToBlue()
    local hive = {
        [1] = {
            [1] = "Looker",
            [2] = "Bubble",
            [3] = "Ninja",
            [4] = "Festive",
            [5] = "Buoyant",
            [6] = "Buoyant",
            [7] = "Buoyant",
            [8] = "Buoyant",
            [9] = "Tadpole",
            [10] = "Tadpole"
        },
        [2] = {
            [1] = "Cool",
            [2] = "Commander",
            [3] = "Music",
            [4] = "Tabby",
            [5] = "Buoyant",
            [6] = "Buoyant",
            [7] = "Buoyant",
            [8] = "Buoyant",
            [9] = "Tadpole",
            [10] = "Tadpole"
        },
        [3] = {
            [1] = "Basic",
            [2] = "Music",
            [3] = "Music",
            [4] = "Fuzzy",
            [5] = "Buoyant",
            [6] = "Buoyant",
            [7] = "Buoyant",
            [8] = "Buoyant",
            [9] = "Tadpole",
            [10] = "Tadpole"
        },
        [4] = {
            [1] = "Bumble",
            [2] = "Shocked",
            [3] = "Music",
            [4] = "Bear",
            [5] = "Buoyant",
            [6] = "Buoyant",
            [7] = "Buoyant",
            [8] = "Buoyant",
            [9] = "Tadpole",
            [10] = "Tadpole"
        },
        [5] = {
            [1] = "Stubborn",
            [2] = "Bucko",
            [3] = "Diamond",
            [4] = "Gummy",
            [5] = "Buoyant",
            [6] = "Buoyant",
            [7] = "Buoyant",
            [8] = "Buoyant",
            [9] = "Tadpole",
            [10] = "Tadpole"
        }
    }

    local plrhive = game:GetService("Players").LocalPlayer.Honeycomb.Value.Cells
    local r = game:GetService("ReplicatedStorage").Events.ConstructHiveCellFromEgg

    for col,v in pairs(hive) do
        for row,v in pairs(v) do
            local cell = plrhive:FindFirstChild("C" .. col .. "," .. row)
            if cell ~= nil and cell.CellType.Value ~= v .. "Bee" then
                r:InvokeServer(col, row, v .. "Bee", 1, false)
                task.wait(0.25)
            end
        end
    end
end

local FarmSettingsGroup = Tabs.Farming:AddLeftGroupbox("Farming Settings")

FarmSettingsGroup:AddToggle("AutoFarmToggle", {
    Text = "AutoFarm: OFF",
    Default = false,
    Callback = toggleAutoFarm,
})

FarmSettingsGroup:AddToggle("AutoDigToggle", {
    Text = "AutoDig: OFF",
    Default = false,
    Callback = toggleAutoDig
})

FarmSettingsGroup:AddToggle("CollectBubblesToggle", {
    Text = "Collect Bubbles: OFF",
    Default = false,
    Callback = toggleCollectBubbles
})

local fields = {
    "Sunflower Field",
    "Dandelion Field",
    "Mushroom Field",
    "Blue Flower Field",
    "Clover Field",
    "Strawberry Field",
    "Spider Field",
    "Bamboo Field",
    "Pineapple Patch",
    "Stump Field",
    "Cactus Field",
    "Pumpkin Patch",
    "Pine Tree Forest",
    "Rose Field",
    "Mountain Top Field",
    "Pepper Patch",
    "Coconut Field"
}

FarmSettingsGroup:AddDropdown("AutoFarmField", {
    Values = fields,
    Default = 1,
    Text = "Select Field",
    Searchable = true,
    Callback = function(Value)
        Options.AutoFarmField.Value = Value
    end,
})

local BuffsGroup = Tabs.Buffs:AddLeftGroupbox("Buffs")
local buffs = {
    "Blue Extract",
    "Red Extract",
    "Enzymes",
    "Glue",
    "Glitter",
    "Tropical Drink",
}
for _, buffName in ipairs(buffs) do
    createBuffToggle(buffName, BuffsGroup)
end

local PurchaseGroup = Tabs.Purchasing:AddLeftGroupbox("Purchasing")

PurchaseGroup:AddInput("BeequipAmount", {
    Default = "1",
    Numeric = true,
    Finished = true,
    Text = "Beequip Slots to Buy",
    Placeholder = "Amount",
    Callback = function(Value)
        local amount = tonumber(Value)
        if amount and amount > 0 then
            buyBeequipSlots(amount)
        else
            Library:Notify("Invalid beequip amount", 4)
        end
    end,
})

PurchaseGroup:AddButton("Buy All Bundles", buyAllBundles)
PurchaseGroup:AddButton("Upgrade Sticker Book (50x)", function() upgradeStickerBook(50) end)
PurchaseGroup:AddButton("Buy Hive Slots (25x)", function() buyHiveSlots(25) end)

local MiscGroup = Tabs.Misc:AddLeftGroupbox("Misc")

local function toggleLoopSpeed(state)
    loopSpeedEnabled = state
    Toggles.LoopSpeedToggle:SetValue(state)
    Library.Toggles.LoopSpeedToggle.Text = loopSpeedEnabled and "LoopSpeed: ON" or "LoopSpeed: OFF"

    if loopSpeedEnabled then
        task.spawn(function()
            while loopSpeedEnabled do
                local player = game.Players.LocalPlayer
                if player and player.Character and player.Character:FindFirstChild("Humanoid") then
                    player.Character.Humanoid.WalkSpeed = Options.LoopSpeedSlider.Value
                end
                task.wait()
            end
        end)
    else
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = 16
        end
    end
end

MiscGroup:AddToggle("LoopSpeedToggle", {
    Text = "LoopSpeed: OFF",
    Default = false,
    Callback = toggleLoopSpeed,
})

MiscGroup:AddSlider("LoopSpeedSlider", {
    Text = "LoopSpeed Value",
    Default = 50,
    Min = 16,
    Max = 150,
    Rounding = 1,
    Callback = function(Value)
        Options.LoopSpeedSlider.Value = Value
    end,
})

MiscGroup:AddButton("Activate Debug Glider", function()
    task.spawn(function()
        while true do
            require(game.ReplicatedStorage.ClientStatCache):Set("EquippedParachute", "DebugGlider")
            task.wait(20)
        end
    end)
end)

MiscGroup:AddButton("AntiLag", function()
    local success, result = pcall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/DEBUG-COM/antilag/refs/heads/main/bc8u1VX.lua"))()
    end)
    if not success then
        Library:Notify("Error loading AntiLag: " .. tostring(result), 5)
    end
end)

local ToolsGroup = Tabs.Tools:AddLeftGroupbox("Tools")

ToolsGroup:AddButton("Toggle Console", function()
    local ShowConsole = game:GetService("CoreGui"):FindFirstChild("ShowConsole")
    if ShowConsole then
        ShowConsole:Destroy()
    else
        local ShowConsole = Instance.new("ScreenGui")
        ShowConsole.Name = "ShowConsole"
        ShowConsole.Parent = game:GetService("CoreGui")
        ShowConsole.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        ShowConsole.ResetOnSpawn = false
        ShowConsole.IgnoreGuiInset = true

        local TextButton = Instance.new("TextButton")
        TextButton.Parent = ShowConsole
        TextButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
        TextButton.BorderSizePixel = 0
        TextButton.Position = UDim2.new(0.467948705, 0, 0.012820513, 0)
        TextButton.Size = UDim2.new(0, 50, 0, 50)
        TextButton.Font = Enum.Font.Roboto
        TextButton.Text = "Show Console"
        TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TextButton.TextScaled = true
        TextButton.TextSize = 14.000
        TextButton.TextWrapped = true

        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 12)
        UICorner.Parent = TextButton

        local UIStroke = Instance.new("UIStroke")
        UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        UIStroke.Color = Color3.fromRGB(255,255,255)
        UIStroke.LineJoinMode = Enum.LineJoinMode.Round
        UIStroke.Thickness = 2
        UIStroke.Parent = TextButton

        local activated = false
        TextButton.MouseButton1Click:Connect(function()
            activated = not activated
            game:GetService("StarterGui"):SetCore("DevConsoleVisible", activated)
        end)

        Library:Notify("Console " .. (activated and "enabled" or "disabled") .. "!", 4)
    end
end)

ToolsGroup:AddButton("Summon Remote-Spy", function()
    local success, result = pcall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/78n/SimpleSpy/main/SimpleSpySource.lua"))()
    end)
    if not success then
        Library:Notify("Error loading Remote-Spy: " .. tostring(result), 5)
    end
end)

local HiveGroup = Tabs.Tools:AddRightGroupbox("Hive Management")

HiveGroup:AddButton("Change Hive to Red", changeHiveToRed)
HiveGroup:AddButton("Change Hive to Blue", changeHiveToBlue)

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")

MenuGroup:AddToggle("KeybindMenuOpen", {
    Default = Library.KeybindFrame.Visible,
    Text = "Open Keybind Menu",
    Callback = function(value)
        Library.KeybindFrame.Visible = value
    end,
})

MenuGroup:AddButton("Unload", function()
    Library:Unload()
end)

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()

print("Bee Swarm Automator loaded!")
